Meeting Notes 7/17 14:26
------------------------

今天 trace 了 PolarSSL 的 SSL handshake 當中 DH keyexchange 部分，
覺得有很多程式碼相當 dirty 而且不容易清理。

1. 加一個 DH 抽象層
2. 把現有的 DH 與 ECDH 程式碼用我們的抽象層包裝起來
   (測試 DH standalone testcase 要通過)
3. 修改 SSL structure, 要加上我們的抽象層
4. 把呼叫 DH 與 ECDH 的程式碼 (主要在 handshaking 部分中)
   換成我們的寫法

Next internal meeting date: 7/21 (一) 早上 10:00 @MD631



Meeting Notes 7/21 13:55
------------------------

今日再看了一次 DH 與 ECDH 的上下層包裝實作方式,
然後簡單地撰寫了 DHM 的我們的包裝...

TODO 分工表:
1-1. Wrap EECDH using our wrapper (the same procedure as ddhm_...)
1-2. Write testsuite for EECDH
2-1. The ddhm_init need to set P and G
2-2. Write testsuite for DDHM
3. Read SSL codes (how does it use the crypto wrapper?)

Next internal meeting date: 7/24 Thu (or 7/25 Fri) 10:00 am @MD631

To be disscussed:
1. buffer length of DH.
2. Currently the only one wrapper for ECDH does not specify which curve to
   use...  (We should use ecp_use_known_dp() in ctx_alloc() to select a
   particular curve for each ECDH wrapper)




Meeting Notes 7/24 16:54
------------------------

今天看了 ssl_{tls,srv,cli}.c 共一萬多行程式碼中和 DH 比較有關聯的部分
簡直是個悲劇花了六個小時

TODO:
1. Rewrite all DH codes in ssl_{tls,srv,cli}.c
2. Decouple buffer IO and crypto computation
   and then rewrite all DH codes in ssl_{tls,srv,cli}.c again

3. Implement Curve25519 (from NaCl)

Call for meeting Friday (7/25) 14:00~16:00 or 20:00~
for discussing about some of this stuff




Meeting Notes 7/25 14:53
------------------------

Let's do the TODO#2 first

- Marshalling/Unmarhsalling
  Think about how to design the interfaces...

- No need to support all legacy versions
  First try to implement TLS 1.2 well



Meeting Notes 8/05 14:17
------------------------

Trace the code of ECDH.

Q: Does it use two certificates?
Q: Or does it use the same public key for two tasks?
A:
    Only one certificate is needed.
    In TLS, the authentication procedure is done by
    signing the "public" params in DH key exchange.
    No need to sign the whole message before FINISH.

Q: What is the difference between RSA and RSA_PSK?
   ... because we saw in RFC5246:
      Key Exchange Alg.  Certificate Key Type
      RSA                RSA public key; the certificate MUST allow the
      RSA_PSK            key to be used for encryption (the
                         keyEncipherment bit MUST be set if the key
                         usage extension is present).
                         Note: RSA_PSK is defined in [TLSPSK].

我們剛剛讀了一下 RC5246 RFC5246 有了一點結論
1. Server 只需要傳一個 certificate 給 client 即可，該 certificate 保證了 key
   exchange 的訊息是沒有被篡改過的 (signature public key / encryption public key /
   DH public key 三種其一)
2. 除此之外，不需要對整個 handshake 訊息用公鑰簽章；只要有 shared secret 就夠了
   因為在 authenticated encrypted channel 上面，雙方可以比較到此為止所有訊息的
   hash value 即可


TODO
------------------------

PHASE 1

1. (Chen) Write testsuite for DHM
2. (Kuo) Create a wrapper for ECDH using our
         new interface [Finish before 23:59 Wed]
3. (Xian) Write testsuite for ECDH

        For 2. and 3., Try not to call additional mpi_* functions in the
        testing function

PHASE 2

1. Rewrite the SSL codes using the new interface

= Next meeting time 8/8 (Fri) 10:30 am at MD631 =




TODO 2014/08/08 Fri 15:21:09
------------------------


1.  [Wu] TLS functions to be replaced using our new wrapper

    Duplicate these functions, and make sure their computation results match
    by running some programs/ssl/ssl_* testing programs

    make_params ->
        set_params
        gen_public
        write_ske_params

    read_params ->
        read_ske_params

    ssl_get_ecdh_params_from_cert ->
        read_from_pk_ctx
        NOTE: 有 server 與 client 兩種
        NOTE: 到底要呼叫 read_from_pk_ctx 還是
              呼叫 read_ske_params 要由 SSL
              根據接受到的 ciphersuite 決定

    dhm_make_public, ecdh_make_public in ssl_parse_server_hello_done ->
        gen_public
        write_public

    for each "*_read_public" in ssl_parse_client_dh_public ->
        read_public

    for each ciphersuite in ssl_psk_derive_premaster ->
        write the corresponding write_premaster function call

2.  [Kuo] Write complete test cases for TLS (for all ciphersuites that we care)

3.  [Chen] Wrap 25519 implementation of NaCl using our interface

Next internal meeting date: 8/13 Wed 10:30 am @MD631



Meeting Notes 2014/08/13 Wed 12:34
------------------------

(1) About adding curve25519

    目前狀態:
        我們選擇引用 NaCl 的方式為直接複製標準的 C 實作，修改得我們在 PolarSSL 內可以使用的樣子
        註: 這是為了 portability ，原 NaCl 有不同平台上的實作

        等我們在 ssl struct 內加好 dhif 抽象層後，就可以直接在 PolarSSL 內使用它
        寫 curve25519 函數的 testcase

(2) About rewriting SSL

    目前還不知道怎樣做:
        我們不知道怎樣測試修改前、修改後的程式碼效果是否相同？(傳 struct 進去可能會有意外的 side effects)
        註: PolarSSL 的 SSL 根本沒有 unitest ，而且很多 buffer 寫入時也不檢查是否會 overflow

    當前狀態:
        有些函數的抽象層，嘗試去修改 SSL 端程式以後才發現不適宜
        三種函數 write_* 我們是想要幫忙檢查 buffer size ，不過 caller 端不管，他直接寫死一個 always passing 的數值
        _read_params 呼叫者需要知道到底讀了多少 bytes 的資料，所以我們選擇多傳一個 int * argument
                     不過為了讓 DHM 和 ECDH 一致，我們讓 DHM 版本的 _read_params 內多讀兩個 bytes (of length)
        _read_public 呼叫者不需要知道到底讀了多少 bytes 的資料

    待辦:
        #1: 更新 wdhm_write_public/wdhm_read_public
            更新 SSL caller 端，讓 DHM 的寫法和 ECDH 的寫法相同 (不要處理 length)

        #2: 更新 wecdh_set_params
            Caller 端呼叫 ecdh_info2.set_params(&ssl->handshake->ecdh_ctx, &(*curve)->grp_id);
            必須要順便把 point_format 傳進去，更新 ecdh_context

        #3: 決定好要用 DHM 還是 ECDH 第一次使用 DH 抽象層時
                對 cli 來說第一次使用 DH interface 是在 parser server key exchange 的 _read_params
                對 srv 來說第一次使用 DH interface 是在 write server key exchange 的 _make_params
            要先 alloc (把兩個 NULL pointers 改掉)

        #4: 各種地方使用抽象層地方的 rewrite
            把所有的 ssl->handshake->dhm_ctx 和 ssl->handshake->ecdh_ctx 換掉

        #5: 更新 dhm 和 ecdh 抽象層的 unitest 讓他吻合我們新的 function prototypes

(3) About test

        #1: SSL 的 unitest
            針對 SSL 步驟中個個程式碼片段測試

        #2: SSL 的 higher level test
            準備好不同的 ciphersuites 列表、不同的憑證
            跑 HTTPS client 去 GET google.com 的 /ncr
            跑 HTTPS server 去讓其他的 HTTPS client (例如 curl 或實際的 web browser) 可以和他交換資料

分工:
    (Wu)   Rewriting SSL
    (Kuo)  Write unitest for SSL
    (Chen) Write higher level tests for SSL

Next internal meeting date: 8/20 Wed 10:30 am @MD631

