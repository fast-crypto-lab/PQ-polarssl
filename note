I'm not so familiar with pk part, so should double check
directory test, our_tests_programs ignored

in dh_wrap.h:
	add extern const dh_info2_t XXX_info (KE)
in ssl.h:
	modify  SSL_MAX_CONTENT_LEN ? 
		I'm not sure what actually this is for. Isn't buffer length defined as SSL_BUFFER_LEN?
	modify SSL_BUFFER_LEN (KE)
	modify or add element(s) in union _ssl_premaster_secret (KE)
	#define SSL_SIG_XXX for PK 
	moldify  _ssl_handshake_params ?
		+#if defined(POLARSSL_DHM_C) || defined(POLARSSL_ECDH_C) || defined(NACL_CURVE25519_C)
		+    const dh_info2_t *dhif_info;
		+    void *dhif_ctx;
		+#endif
		+    int point_format;                   /*!< XXX Our additional params for EC */
		not sure what these are
in ssl_ciphersuite.h:
	define ciphersuite(PK&KE)
	add new ciphersuite in key_exchange_type_t(PK&KE)
Makefile                            
in ssl_ciphersuites.c:
	define ssl_ciphersuite_t in ciphersuite_definitions(line 1676)(PK & KE)
	add case in ssl_get_ciphersuite_sig_pk_alg(PK)
in ssl_tls.c:
	include new KE header(KE)
	in ssl_sig_from_pk(PK), add:
		if( pk_can_do( pk, OUR_PK_XXX ) )
			return( SSL_SIG_XXX );
	in ssl_pk_alg_from_sig(PK), add:
		case SSL_SIG_XXX:
			return ( OUR_PK_TTS );
	in ssl_check_cert_usage(PK)
		add cases
		


		+#if defined(POLARSSL_DHM_C) || defined(POLARSSL_ECDH_C) || defined(NACL_CURVE25519_C)
		+    handshake->dhif_info = NULL;
		+    handshake->dhif_ctx = NULL;
		+#endif
		+#if defined(POLARSSL_DHM_C) || defined(POLARSSL_ECDH_C) || defined(NACL_CURVE25519_C)
		+    if (handshake->dhif_info != NULL) {
		+        handshake->dhif_info->ctx_free(handshake->dhif_ctx);
		+    }
		+#endif
		what are these?

in ssl_srv.c:
	include new KE header(KE)
	in ssl_write_server_key_exchange(KE), add:
		if( ciphersuite_info->key_exchange == OUR_KEY_EXCHANGE_XXX_YYY)
			{
				ssl->handshake->dhif_info = &XXX_info;
				if (ssl->handshake->dhif_ctx == NULL) {
					ssl->handshake->dhif_ctx = ssl->handshake->dhif_info->ctx_alloc();
				}
			}
	at line 2293 ,2335, 2747 add new ciphersuit to the long if-list(KE).
	
in ssl_cli.c:
	at line 197, something about hash shuld be added, I'm not sure what it is.
	in ssl_parse_server_key_exchange(KE), add:
		if( ciphersuite_info->key_exchange == OUR_KEY_EXCHANGE_XXX_YYY)
			{
				ssl->handshake->dhif_info = &XXX_info;
				if (ssl->handshake->dhif_ctx == NULL) {
					ssl->handshake->dhif_ctx = ssl->handshake->dhif_info->ctx_alloc();
				}
			}
	at line 1679, 1700, 2092 add new ciphersuit to the long if-list(KE).

================================================================================

PK 要加新的數位簽章演算法
    add tts
    add rainbow

* include/polarssl/oid.h
    新增:
        #define OID_OUR_ALG_TTS                 OID_CERTICOM "\x01\x0d"
        #define OID_OUR_ALG_TTS_SHA256      OID_ANSI_X9_62_SIG_SHA2 "\x05"

* include/polarssl/pk.h
    新增:
        #define pk_tts( pk )       ( (tts_context *) (pk).pk_ctx )
    在 enum pk_type_t 新增:
        OUR_PK_TTS,
        OUR_PK_RAINBOW,

* include/polarssl/pk_wrap.h
    新增:
        extern const pk_info_t tts_info; ####

* include/polarssl/ssl.h
    原本已有:
        define SSL_SIG_ANON                 0
        define SSL_SIG_RSA                  1
        define SSL_SIG_ECDSA                3
    新增:
        define SSL_SIG_TTS                  4

* include/polarssl/ssl_ciphersuites.h
    新增:
        #define TLS_ECDHE_TTS_WITH_AES_128_GCM_SHA256           0xCCFF /* Ours */
        #define TLS_LATTICEE_TTS_WITH_AES_128_GCM_SHA256        0xCC00 /* Ours */
        #define TLS_LATTICEE_RAINBOW_WITH_AES_128_GCM_SHA256    0xCC01 /* Ours */
        #define TLS_LATTICEE_RSA_WITH_AES_128_GCM_SHA256        0xCC02 /* Ours */
        #define TLS_LATTICEE_ECDSA_WITH_AES_128_GCM_SHA256      0xCC03 /* Ours */
    在 enum key_exchange_type_t 新增: ####
        OUR_KEY_EXCHANGE_ECDHE_TTS,
        OUR_KEY_EXCHANGE_LATTICEE_TTS,
        OUR_KEY_EXCHANGE_LATTICEE_RAINBOW,
        OUR_KEY_EXCHANGE_LATTICEE_RSA,
        OUR_KEY_EXCHANGE_LATTICEE_ECDSA,

* library/oid.c
    ####
    在 static const oid_sig_alg_t oid_sig_alg[] = { ... }; 內新增:
        {
            { ADD_LEN( OID_OUR_ALG_TTS_SHA256 ), "TTS-with-SHA256",     "TTS with SHA256" },
            POLARSSL_MD_SHA256,   OUR_PK_TTS,
        },
    ####
    在 static const oid_pk_alg_t oid_pk_alg[] = { ... }; 內新增:
        {
            { ADD_LEN( OID_OUR_ALG_TTS ), "id-ttsKeyExchange", "TTS" }, OUR_PK_TTS
        },

* library/pk.c
    ####
    新增:
        #include "rainbow_tts/rainbow.h"
    ####
    在 const pk_info_t * pk_info_from_type( pk_type_t pk_type ) { ... } 內新增:
        case OUR_PK_TTS:
            return( &tts_info );

* library/pk_wrap.c ===> library/polarssl_wrapper_ttsrb.c
    新增這兩個結構以及他們需要的函數:
        const pk_info_t tts_info = { ... };
        const pk_info_t rainbow_info = { ... };

* library/pkparse.c
    #### 這裡就不要改了，只是小痛苦而已 ####
    新增: include "rainbow_tts/rainbow.h"
    新增: pk_get_ttspubkey()
    在函數 pk_parse_subpubkey() 新增:
        if( pk_alg == OUR_PK_TTS) { ... } else
    新增: pk_parse_key_tts_der()
    在函數 pk_parse_key() 新增:
        檔案 -----BEGIN TTS PRIVATE KEY----- 到 -----END TTS PRIVATE KEY----- 的讀取方法

* library/pkwrite.c
    #### 這裡就不要改了，只是小痛苦而已 ####
    include "rainbow_tts/rainbow.h"
    新增 pk_write_tts_pubkey()
    在函數 pk_write_pubkey() 新增:
        if( pk_get_type( key) == OUR_PK_TTS ) { ... } else
    在函數 pk_write_key_der() 新增:
        if( pk_get_type( key ) == OUR_PK_TTS ) { ... } else
    在函數 pk_write_key_pem() 新增:
        if ( pk_get_type( key ) == OUR_PK_TTS ) { ... } else

* library/ssl_ciphersuites.c
    在 static const ssl_ciphersuite_t ciphersuite_definitions[] = { ... }; 新增:
        { TLS_ECDHE_TTS_WITH_AES_128_GCM_SHA256, "TLS-ECDHE-TTS-WITH-AES-128-GCM-SHA256", POLARSSL_CIPHER_AES_128_GCM, POLARSSL_MD_SHA256, OUR_KEY_EXCHANGE_ECDHE_TTS, SSL_MAJOR_VERSION_3, SSL_MINOR_VERSION_3, SSL_MAJOR_VERSION_3, SSL_MINOR_VERSION_3, 0 },
        { TLS_LATTICEE_TTS_WITH_AES_128_GCM_SHA256, "TLS-LATTICEE-TTS-WITH-AES-128-GCM-SHA256", POLARSSL_CIPHER_AES_128_GCM, POLARSSL_MD_SHA256, OUR_KEY_EXCHANGE_LATTICEE_TTS, SSL_MAJOR_VERSION_3, SSL_MINOR_VERSION_3, SSL_MAJOR_VERSION_3, SSL_MINOR_VERSION_3, 0 },
        { TLS_LATTICEE_RAINBOW_WITH_AES_128_GCM_SHA256, "TLS-LATTICEE-RAINBOW-WITH-AES-128-GCM-SHA256", POLARSSL_CIPHER_AES_128_GCM, POLARSSL_MD_SHA256, OUR_KEY_EXCHANGE_LATTICEE_RAINBOW, SSL_MAJOR_VERSION_3, SSL_MINOR_VERSION_3, SSL_MAJOR_VERSION_3, SSL_MINOR_VERSION_3, 0 },
        { TLS_LATTICEE_RSA_WITH_AES_128_GCM_SHA256, "TLS-LATTICEE-RSA-WITH-AES-128-GCM-SHA256", POLARSSL_CIPHER_AES_128_GCM, POLARSSL_MD_SHA256, OUR_KEY_EXCHANGE_LATTICEE_RSA, SSL_MAJOR_VERSION_3, SSL_MINOR_VERSION_3, SSL_MAJOR_VERSION_3, SSL_MINOR_VERSION_3, 0 },
        { TLS_LATTICEE_ECDSA_WITH_AES_128_GCM_SHA256, "TLS-LATTICEE-ECDSA-WITH-AES-128-GCM-SHA256", POLARSSL_CIPHER_AES_128_GCM, POLARSSL_MD_SHA256, OUR_KEY_EXCHANGE_LATTICEE_ECDSA, SSL_MAJOR_VERSION_3, SSL_MINOR_VERSION_3, SSL_MAJOR_VERSION_3, SSL_MINOR_VERSION_3, 0 },
    在函數 ssl_get_ciphersuite_sig_pk_alg() 新增:
        case OUR_KEY_EXCHANGE_ECDHE_TTS:
        case OUR_KEY_EXCHANGE_LATTICEE_TTS:
            return( OUR_PK_TTS );

* library/ssl_cli.c
    在函數 ssl_write_signature_algorithms_ext() 新增:
        sig_alg_list[sig_alg_len++] = SSL_HASH_SHA256;
        sig_alg_list[sig_alg_len++] = SSL_SIG_TTS;

* library/ssl_tls.c
    在函數 ssl_sig_from_pk() 新增:
        if( pk_can_do( pk, OUR_PK_TTS ) )
            return( SSL_SIG_TTS );
    在函數 ssl_pk_alg_from_sig() 新增:
        case SSL_SIG_TTS:
            return ( OUR_PK_TTS );
    在函數 ssl_check_cert_usage() 的 usage = KU_DIGITAL_SIGNATURE 之前新增:
        case OUR_KEY_EXCHANGE_ECDHE_TTS:
        case OUR_KEY_EXCHANGE_LATTICEE_TTS:
        case OUR_KEY_EXCHANGE_LATTICEE_RAINBOW:
        case OUR_KEY_EXCHANGE_LATTICEE_RSA:
        case OUR_KEY_EXCHANGE_LATTICEE_ECDSA:

------------------------------------------------------------------------------

After new DH and PK done, 有了新的 key exchange method 以及新的 ciphersuite，要在很多地方加新的條件判斷程式碼...
    以 LATTICEE 與 TTS 搭配為例，可以搜尋所有 出現 TLS_LATTICEE_TTS_WITH_AES_128_GCM_SHA256 和 OUR_KEY_EXCHANGE_LATTICEE_TTS 的地方。




TODO: 保留原本的 pk 層，加入 rainbow 看看能否直接使用。



TODO: Macro definitions and wrapper still needs to be cleaned up
TODO: Test for TTS2, RAINBOW, RAINBOW2

